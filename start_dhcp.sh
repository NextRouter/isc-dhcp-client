#!/bin/bash

# This script configures and starts the isc-dhcp-server on Ubuntu.
# WARNING: DO NOT RUN THIS SCRIPT ON macOS.

# --- Configuration ---
INTERFACE="eth2"
SERVER_IP="10.40.0.1"
SUBNET_MASK="20"
SUBNET="10.40.0.0"
NETMASK="255.255.240.0"
RANGE_START="10.40.0.2"
RANGE_END="10.40.15.255"
ROUTER_IP="10.40.0.1"
DNS_SERVERS="8.8.8.8, 8.8.4.4"

# 1. Check for root privileges
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

echo "--- Step 1: Passed root check ---"

# 2. Install isc-dhcp-server if not installed
if ! dpkg -l | grep -q "isc-dhcp-server"; then
    echo "isc-dhcp-server not found. Installing..."
    apt-get update
    apt-get install -y isc-dhcp-server prometheus prometheus-node-exporter
else
    echo "isc-dhcp-server is already installed."
fi

echo "--- Step 2: Completed package check/installation ---"

# 3. Configure static IP for the interface
echo "Configuring static IP ${SERVER_IP}/${SUBNET_MASK} on ${INTERFACE}..."
# Flush existing IPs to avoid conflicts
ip addr flush dev ${INTERFACE}
# Add the new static IP
ip addr add ${SERVER_IP}/${SUBNET_MASK} dev ${INTERFACE}

echo "--- Step 3: Completed static IP configuration ---"

# 4. Create dhcpd.conf
echo "Generating /etc/dhcp/dhcpd.conf..."
cat <<EOF > /etc/dhcp/dhcpd.conf
# DHCP Server Configuration File
# Generated by Gemini

# Option definitions
option domain-name "example.org";
option domain-name-servers ${DNS_SERVERS};

default-lease-time 600;
max-lease-time 7200;

# Use this to enable / disable dynamic dns updates globally.
ddns-update-style none;

# This DHCP server is the official DHCP server for this network.
authoritative;

# Subnet declaration
subnet ${SUBNET} netmask ${NETMASK} {
  range ${RANGE_START} ${RANGE_END};
  option routers ${ROUTER_IP};
}
EOF

echo "--- Step 4: Completed dhcpd.conf generation ---"

# 5. Configure the interface for isc-dhcp-server
echo "Configuring isc-dhcp-server to listen on ${INTERFACE}..."
if [ -f /etc/default/isc-dhcp-server ]; then
    # Note: Using % as delimiter for sed because INTERFACE might contain /
    sed -i 's%^INTERFACESv4=.*%INTERFACESv4="'${INTERFACE}'"%' /etc/default/isc-dhcp-server
else
    echo "Warning: /etc/default/isc-dhcp-server not found. This might be an issue on newer systems."
fi

echo "--- Step 5: Completed interface configuration ---"

# 6. Restart and check status of the DHCP server
echo "Restarting isc-dhcp-server..."
systemctl restart isc-dhcp-server

echo "--- Step 6: Service restarted. Checking status... ---"
systemctl status isc-dhcp-server

# --- Rust Installation ---

# 7. Install Rust Execution Environment
echo "--- Step 7: Installing Rust ---"

# 7.1. Install dependencies (curl)
if ! command -v curl &> /dev/null; then
    echo "curl not found. Installing..."
    # apt-get update is already run in Step 2 if needed
    apt-get install -y curl
else
    echo "curl is already installed."
fi

# 7.2. Install rustup (for root user)
echo "Installing Rust for root user (/root) via rustup..."
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

# 7.3. Source the environment (for root user)
if [ -f "$HOME/.cargo/env" ]; then
    source "$HOME/.cargo/env"
    echo "Sourced Rust environment variables for root."
else
    echo "Warning: /root/.cargo/env not found after rustup install."
fi

# 7.4. Verify installation (for root user)
echo "Verifying root's Rust installation..."
if command -v rustc &> /dev/null; then
    rustc --version
    cargo --version
    echo "Rust installation for root successful."
else
    echo "Error: Rust (root) installation failed or PATH not set correctly."
fi

echo "--- Step 7: Completed Rust installation for root ---"


# --- ここから改造・追記 (Step 7.5) ---

# 7.5. Install Rust for the original sudo user (if they exist)
if [ -n "$SUDO_USER" ]; then
    echo "--- Step 7.5: Installing Rust for user $SUDO_USER ---"
    
    # $SUDO_USER のホームディレクトリを正しく取得
    SUDO_USER_HOME=$(getent passwd "$SUDO_USER" | cut -d: -f6)

    if [ -z "$SUDO_USER_HOME" ]; then
        echo "Error: Could not find home directory for $SUDO_USER. Skipping install."
    else
        echo "Installing Rust via rustup for $SUDO_USER (Home: $SUDO_USER_HOME)..."
        # 'sudo -u $SUDO_USER' を使って、インストーラーをそのユーザーとして実行
        sudo -u "$SUDO_USER" curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sudo -u "$SUDO_USER" sh -s -- -y
        
        # 検証 (PATHがまだ通っていない可能性を考慮し、フルパスでバイナリを直接叩く)
        echo "Verifying $SUDO_USER's installation..."
        if [ -f "$SUDO_USER_HOME/.cargo/bin/rustc" ]; then
            sudo -u "$SUDO_USER" "$SUDO_USER_HOME/.cargo/bin/rustc" --version
            sudo -u "$SUDO_USER" "$SUDO_USER_HOME/.cargo/bin/cargo" --version
            echo "Rust installation successful for $SUDO_USER."
            echo "Note: $SUDO_USER may need to log out and log back in, or run 'source $SUDO_USER_HOME/.cargo/env'"
        else
            echo "Error: Rust installation failed for $SUDO_USER."
        fi
    fi
    echo "--- Step 7.5: Completed Rust installation for $SUDO_USER ---"
else
    echo "--- Step 7.5: \$SUDO_USER not set. Skipping install for non-root user. ---"
    echo "(This is normal if you ran 'sudo su -' or logged in directly as root)"
fi

# --- 追記ここまで ---
